BR START

#FUNCTION DECLARATIONS

#MULTIPLIES R0 BY R1, STORES THE RESULT IN R0, AND RETURNS PC TO R2
MULT:
	MOV 1 R3
	MOV R0 R4
	MULTLOOP:
		ADD 1 R3 R3
		ADD R4 R0 R0
		BLT R3 R1 MULTLOOP
	MOV R2 PC

#DIVIDES R0 BY R1, STORES THE RESULT IN R0, THE REMAINDER IN R1, AND RETURNS PC TO R2
DIV:
	MOV 0 R3
	DIVLOOP:
		ADD 1 R3 R3
		SUB R0 R1 R0
		BLT R0 R1 DIVBREAK
		BR DIVLOOP
	DIVBREAK:
	MOV R0 R1
	MOV R3 R0
	MOV R2 PC

#RAISES R0 TO THE R1-TH POWER, STORES THE RESULT IN R0, AND RETURNS PC TO R2
POW:
	#SAVE R0-R2 IN R5-R7
	MOV R0 R5
	MOV R1 R6
	MOV R2 R7

	#TRACK CURRENT ITERATION COUNT IN R8
	MOV 1 R8

	#STORE INTERMEDIATE RESULTS IN R9
	MOV R5 R9
	
	#WHILE ITERATION COUNT IS LESS THAN EXPONENT
	POWLOOP:

		#DO INTERMEDIATE RESULT * BASE
		MOV R9 R0
		MOV R5 R1
		MOV PC R2
		ADD 2 R2 R2
		BR MULT

		#SAVE INTERMEDIATE RESULT
		MOV R0 R9

		#INCREMENT ITERATION COUNT
		ADD 1 R8 R8

		#WHILE R8 < R6
		BLT R8 R6 POWLOOP

	#IF WE'RE DONE, MOVE RESULT TO R0 AND BRANCH BACK
	MOV R9 R0
	MOV R7 PC

START:

#FOR TESTING, MOVE DUMMY VALUES INTO R1 - R6



#RAISE 3^4 = 81
MOV 3 R0
MOV 4 R1
MOV PC R2
ADD 2 R2 R2
BR POW

#MULTIPLY POW RESULT * 150 = 12150
MOV 150 R1
MOV PC R2
ADD 2 R2 R2
BR MULT
